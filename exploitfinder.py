# Exploit search tool from within exploitdb
## ===============[ Used libraries ]================ ##
from distutils.log import error
from colorama import init , Fore
import time , requests , json
from os import path , name , system , stat
from  prettytable import PrettyTable
## ===============[ The colors used ]================== ##
init()
number = 0 
errornum = 0
RED = Fore.RED
YLW = Fore.YELLOW
BLU = Fore.BLUE
GRN = Fore.GREEN
RES = Fore.RESET

                      #    banner   #
BannerAcsii = f"""{RED} _____            _       _ _    {GRN} _____ _           _           
{RED}| ____|_  ___ __ | | ___ (_) |_  {GRN}|  ___(_)_ __   __| | ___ _ __ 
{RED}|  _| \ \/ / '_ \| |/ _ \| | __| {GRN}| |_  | | '_ \ / _` |/ _ \ '__|       
{RED}| |___ >  <| |_) | | (_) | | |_  {GRN}|  _| | | | | | (_| |  __/ |   
{RED}|_____/_/\_\ .__/|_|\___/|_|\__| {GRN}|_|   |_|_| |_|\__,_|\___|_|   
{RED}           |_|  
""" 

table = PrettyTable()
table.field_names=[
    f'{GRN}ID{RES}',
    f'{GRN}DES{RES}' ,
    f'{GRN}EID{RES}' ,
    f'{GRN}TYPE{RES}',
    f'{GRN}PLATFORM{RES}',
    f'{GRN}AUTHOR{RES}',
    f'{GRN}DATA{RES}'
    ]


# ======================================= #

# Dictionary of exploitdb site tags
Tags = {
    "authentication bypass":"16","credentials bypass":"16",
    "buffer overflow":"31","bug report":"37",
    "client side":"18","code injection":"14",
    "command injection":"15","console":"38",
    "cross-site request forgery":"12","csrf":"12",
    "cross-site scripting":"8","xss":"8",
    "denial of service":"13","dos":"13",
    "deserialization":"41","file inclusion":"9",
    "lfi":"9","rfi":"9","heap overflow":"34",
    "integer overflow":"24","local":"22",
    "malware":"28","metasploit framework":"3",
    "msf":"3","null pointer dereference":"27",
    "object injection":"36","out of bounds":"20",
    "pwn2Own":"39","race condition":"26",
    "remote":"21","server-side request forgery (SSRF)":"25",
    "ssrf":"25","sql injection":"7",
    "sqli":"7","traversal":"40",
    "type confusion":"35","use after free":"19",
    "uaf":"19","wordpress Core":"1",
    "wordpress plugin":"4",
    "xml external entity":"23","xxe":"23"
    }


session = requests.session()    # Session variable
# ================[ Tool function ]================== #

# Function for cleaning the terminal
def clear(): 
    if name == 'nt':
        system('cls')
        time.sleep(0.5)
    elif name == 'posix':
        system('clear')
        time.sleep(0.5)




# Error function for error management
def Error():
    clear()
    print(f"""{RED}_____     
| ____|_ __ _ __ ___  _ __ 
|  _| | '__| '__/ _ \| '__|
| |___| |  | | | (_) | |   
|_____|_|  |_|  \___/|_|   {RES}""")
    time.sleep(0.5)
    exit()




# The main banner for beauty
def MainBanner():
    clear()
    print(BannerAcsii)
    print(f"{RED}[{GRN}+{RED}] {GRN}Get results quickly with the following options")
    print(f"{RED}[{GRN}+{RED}] {GRN}Use the search options below")
    print(f"""
{RED}[{GRN}1{RED}] {BLU}Tag             {RED}[{GRN}2{RED}] {BLU}Type 
{RED}[{GRN}3{RED}] {BLU}Platform        {RED}[{GRN}4{RED}] {BLU}port
{RED}[{GRN}5{RED}] {BLU}Free search     {RED}[{GRN}6{RED}] {BLU}New Exploit
{RED}[{GRN}7{RED}] {BLU}Author          {RED}[{GRN}8{RED}] {BLU}Download
          {RED}[{GRN}9{RED}] {BLU}Exit\n""")



# Function to create exploitdb site layout
def session_main():
    if( path.exists("cookies.txt") == True ) and (stat("cookies.txt").st_size > 0) and (path.exists("headers.txt") == True) and (stat("headers.txt").st_size > 0):
        with open('cookies.txt', 'r') as file:
            session.cookies.update(json.load(file))
        with open('headers.txt', 'r') as file:
            session.headers = json.load(file)
    else:
        try:
            session.headers = {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36",
                    "Upgrade-Insecure-Requests": "1"
                    }
            data = session.get("https://exploit-db.com/")
            data = session.get("https://www.exploit-db.com/")
            session.headers.update({
                    'Cookie':  f"XSRF-TOKEN={data.cookies['XSRF-TOKEN']}; exploit_database_session={data.cookies['exploit_database_session']}",
                    "Referer": "https://www.exploit-db.com/",
                    "X-Requested-With": "XMLHttpRequest"
                    })
            with open('cookies.txt', 'w+') as file:
                json.dump(session.cookies.get_dict(), file)
            with open('headers.txt', 'w+') as file:
                json.dump(session.headers, file)
        except:
            if errornum == 3:
                Error()
            else:
                session_main()
            errornum += 1



# New exploit badge function
def New_Exploit():
    session_main()
    api = session.get("https://www.exploit-db.com/?draw=1&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5Bsearchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_id&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bdata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B8%5D%5Bdata%5D=code&columns%5B8%5D%5Bname%5D=code.code&columns%5B8%5D%5Bsearchable%5D=true&columns%5B8%5D%5Borderable%5D=true&columns%5B8%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B8%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B9%5D%5Bdata%5D=id&columns%5B9%5D%5Bname%5D=id&columns%5B9%5D%5Bsearchable%5D=false&columns%5B9%5D%5Borderable%5D=true&columns%5B9%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B9%5D%5Bsearch%5D%5Bregex%5D=false&order%5B0%5D%5Bcolumn%5D=9&order%5B0%5D%5Bdir%5D=desc&start=0&length=15&search%5Bvalue%5D=&search%5Bregex%5D=false&author=&port=&type=&tag=&platform=&_=1642162345469")
    MainData = api.json()['data']
    for Data in MainData:
        global number
        number += 1
        table.add_row([
            f'{GRN}{number}{RES}', f"{GRN}{Data['description'][1]}{RES}", 
            f"{GRN}{Data['id']}{RES}", 
            f"{GRN}{Data['type_id']}{RES}",
            f"{GRN}{Data['platform_id']}{RES}",
            f"{GRN}{Data['author_id'][1]}{RES}",
            f"{GRN}{Data['date_published']}{RES}"
            ])
    print(f'\n{table}\n')

    try:
        input(f"{YLW}[{RED}+{YLW}] {GRN}Use {YLW}ctrl+c{GRN} to {RED}exit ...{RED}")
    except:
        exit()
    try:
        input(f"{YLW}[{RED}+{YLW}] {GRN}Use {YLW}ctrl+c{GRN} to {RED}exit ...{RED}")
    except:
        exit()

# Search function with the desired port on the exploitdb site
def Search_Port():
    session_main()
    clear()
    print(BannerAcsii)
    print(f"{RED}[{GRN}+{RED}] {BLU}Please enter the Port you want to search")
    print(f"{GRN}[{YLW}!{GRN}] {RED}Try to use the correct Pors\n") 
    try:
        PortOptions = int(input(f"""{RED}┌──{BLU}[{GRN}EXPLOIT FINDER{BLU}]{RED}-{BLU}[{RED}SearchByPort{BLU}]
{RED}└─{BLU}>>{RES} """))   
    except:
        Error()   
        
    api = session.get(f"https://www.exploit-db.com/?port={str(PortOptions)}&draw=1&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5Bsearchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_id&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bdata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B8%5D%5Bdata%5D=code&columns%5B8%5D%5Bname%5D=code.code&columns%5B8%5D%5Bsearchable%5D=true&columns%5B8%5D%5Borderable%5D=true&columns%5B8%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B8%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B9%5D%5Bdata%5D=id&columns%5B9%5D%5Bname%5D=id&columns%5B9%5D%5Bsearchable%5D=false&columns%5B9%5D%5Borderable%5D=true&columns%5B9%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B9%5D%5Bsearch%5D%5Bregex%5D=false&order%5B0%5D%5Bcolumn%5D=9&order%5B0%5D%5Bdir%5D=desc&start=0&length=15&search%5Bvalue%5D=&search%5Bregex%5D=false&author=&port={str(PortOptions)}&type=&tag=&platform=&_=1642320476886")
    MainData = api.json()['data']
    if len(MainData) == 0:
        print(f"{BLU}[{RED}-{BLU}] {RED}No data found {YLW}:(")
        time.sleep(1)
        exit()
    else:
        for Data in MainData:
            global number
            number += 1
            table.add_row([
                f'{GRN}{number}{RES}', 
                f"{GRN}{Data['description'][1]}{RES}", 
                f"{GRN}{Data['id']}{RES}", 
                f"{GRN}{Data['type_id']}{RES}",
                f"{GRN}{Data['platform_id']}{RES}",
                f"{GRN}{Data['author_id'][1]}{RES}",
                f"{GRN}{Data['date_published']}{RES}"
                ])
        print(f'\n{table}\n')
    try:
        input(f"{YLW}[{RED}+{YLW}] {GRN}Use {YLW}ctrl+c{GRN} to {RED}exit ...{RED}")
    except:
        exit()
    

# Search function with the desired Platform on the exploitdb site
def Search_Platform():
    session_main()
    clear()
    print(BannerAcsii)
    print(f"{RED}[{GRN}+{RED}] {BLU}Please enter the Platform you want to search")
    print(f"{GRN}[{YLW}!{GRN}] {RED}Try to use the correct Platforms\n")   
    PlatformOptions = input(f"""{RED}┌──{BLU}[{GRN}EXPLOIT FINDER{BLU}]{RED}-{BLU}[{RED}SearchByPlatform{BLU}]
{RED}└─{BLU}>>{RES} """)
    api = session.get(f"https://www.exploit-db.com/?platform={PlatformOptions}&draw=1&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5Bsearchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_id&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bdata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B8%5D%5Bdata%5D=code&columns%5B8%5D%5Bname%5D=code.code&columns%5B8%5D%5Bsearchable%5D=true&columns%5B8%5D%5Borderable%5D=true&columns%5B8%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B8%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B9%5D%5Bdata%5D=id&columns%5B9%5D%5Bname%5D=id&columns%5B9%5D%5Bsearchable%5D=false&columns%5B9%5D%5Borderable%5D=true&columns%5B9%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B9%5D%5Bsearch%5D%5Bregex%5D=false&order%5B0%5D%5Bcolumn%5D=9&order%5B0%5D%5Bdir%5D=desc&start=0&length=15&search%5Bvalue%5D=&search%5Bregex%5D=false&author=&port=&type=&tag=&platform={PlatformOptions}&_=1642320247710")
    MainData = api.json()['data']
    if len(MainData) == 0:
        print(f"{BLU}[{RED}-{BLU}] {RED}No data found {YLW}:(")
        time.sleep(1)
        exit()
    else:
        for Data in MainData:
            global number
            number += 1
            table.add_row([
                f'{GRN}{number}{RES}', 
                f"{GRN}{Data['description'][1]}{RES}", 
                f"{GRN}{Data['id']}{RES}", 
                f"{GRN}{Data['type_id']}{RES}",
                f"{GRN}{Data['platform_id']}{RES}",
                f"{GRN}{Data['author_id'][1]}{RES}",
                f"{GRN}{Data['date_published']}{RES}"
                ])
        print(f'\n{table}\n')
    try:
        input(f"{YLW}[{RED}+{YLW}] {GRN}Use {YLW}ctrl+c{GRN} to {RED}exit ...{RED}")
    except:
        exit()

# Search function with the desired Tag on the exploitdb site
def Search_Tag():
    session_main()
    clear()
    print(BannerAcsii)
    print(f"{GRN}[{YLW}!{GRN}] {RED}Enter the desired tag correctly to avoid problems\n")
    print(f"""
{RED}[{GRN}+{RED}] {BLU}authentication bypass        {RED}[{GRN}+{RED}] {BLU}credentials bypass                  {RED}[{GRN}+{RED}] {BLU}buffer overflow 
{RED}[{GRN}+{RED}] {BLU}bug report                   {RED}[{GRN}+{RED}] {BLU}client side                         {RED}[{GRN}+{RED}] {BLU}code injection 
{RED}[{GRN}+{RED}] {BLU}command injection            {RED}[{GRN}+{RED}] {BLU}console                             {RED}[{GRN}+{RED}] {BLU}cross-site request forgery {RED}OR {BLU}CSRF  
{RED}[{GRN}+{RED}] {BLU}cross-site scripting {RED}OR {BLU}XSS  {RED}[{GRN}+{RED}] {BLU}denial of service {RED}OR {BLU}DOS            {RED}[{GRN}+{RED}] {BLU}deserialization 
{RED}[{GRN}+{RED}] {BLU}file inclusion {RED}OR {BLU}LFI{YLW}/{BLU}RFI    {RED}[{GRN}+{RED}] {BLU}heap overflow                       {RED}[{GRN}+{RED}] {BLU}integer overflow 
{RED}[{GRN}+{RED}] {BLU}local                        {RED}[{GRN}+{RED}] {BLU}malware                             {RED}[{GRN}+{RED}] {BLU}metasploit framework {RED}OR {BLU}MSF 
{RED}[{GRN}+{RED}] {BLU}null pointer dereference     {RED}[{GRN}+{RED}] {BLU}object injection                    {RED}[{GRN}+{RED}] {BLU}out of bounds 
{RED}[{GRN}+{RED}] {BLU}pwn2Own                      {RED}[{GRN}+{RED}] {BLU}race condition                      {RED}[{GRN}+{RED}] {BLU}use after free {RED}OR {BLU}UAF
{RED}[{GRN}+{RED}] {BLU}remote                       {RED}[{GRN}+{RED}] {BLU}server-side request forgery {RED}OR {BLU}SSRF {RED}[{GRN}+{RED}] {BLU}sql injection {RED}OR {BLU}SQLi
{RED}[{GRN}+{RED}] {BLU}traversal                    {RED}[{GRN}+{RED}] {BLU}type confusion                      {RED}[{GRN}+{RED}] {BLU}wordpress Core
{RED}[{GRN}+{RED}] {BLU}wordpress plugin             {RED}[{GRN}+{RED}] {BLU}xml external entity {RED}OR {BLU}XXE\n""")
    TagOptions = input(f"""{RED}┌──{BLU}[{GRN}EXPLOIT FINDER{BLU}]{RED}-{BLU}[{RED}SearchByTag{BLU}]
{RED}└─{BLU}>>{RES} """).lower()
    try:
        api = session.get(f"https://www.exploit-db.com/?tag={Tags[TagOptions]}&draw=1&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5Bsearchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_id&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bdata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B8%5D%5Bdata%5D=code&columns%5B8%5D%5Bname%5D=code.code&columns%5B8%5D%5Bsearchable%5D=true&columns%5B8%5D%5Borderable%5D=true&columns%5B8%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B8%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B9%5D%5Bdata%5D=id&columns%5B9%5D%5Bname%5D=id&columns%5B9%5D%5Bsearchable%5D=false&columns%5B9%5D%5Borderable%5D=true&columns%5B9%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B9%5D%5Bsearch%5D%5Bregex%5D=false&order%5B0%5D%5Bcolumn%5D=9&order%5B0%5D%5Bdir%5D=desc&start=0&length=15&search%5Bvalue%5D=&search%5Bregex%5D=false&author=&port=&type=&tag={Tags[TagOptions]}&platform=&_=1642320607001")
    except:
        Error()
        
    MainData = api.json()['data']
    if len(MainData) == 0:
        print(f"{BLU}[{RED}-{BLU}] {RED}No data found {YLW}:(")
        time.sleep(1)
        exit()
    else:
        for Data in MainData:
            global number
            number += 1
            table.add_row([
                f'{GRN}{number}{RES}', 
                f"{GRN}{Data['description'][1]}{RES}", 
                f"{GRN}{Data['id']}{RES}", 
                f"{GRN}{Data['type_id']}{RES}",
                f"{GRN}{Data['platform_id']}{RES}",
                f"{GRN}{Data['author_id'][1]}{RES}",
                f"{GRN}{Data['date_published']}{RES}"
                ])
        print(f'\n{table}\n')
    try:
        input(f"{YLW}[{RED}+{YLW}] {GRN}Use {YLW}ctrl+c{GRN} to {RED}exit ...{RED}")
    except:
        exit()    

# Search function with the desired Type on the exploitdb site
def Search_Type():
    session_main()
    clear()
    print(BannerAcsii)
    Type = ["dos","local","remote","webapps"]
    print(f"{GRN}[{YLW}!{GRN}] {RED}Select from the following types and enter it\n")
    print(f"""
{RED}[{GRN}-{RED}] {BLU}webapps        {RED}[{GRN}-{RED}] {BLU}remote
{RED}[{GRN}-{RED}] {BLU}dos            {RED}[{GRN}-{RED}] {BLU}local\n""")
    TypeOptions = input(f"""{RED}┌──{BLU}[{GRN}EXPLOIT FINDER{BLU}]{RED}-{BLU}[{RED}SearchByType{BLU}]
{RED}└─{BLU}>>{RES} """).lower()
    if TypeOptions in Type:
        api = session.get(f"https://www.exploit-db.com/?type={TypeOptions}&draw=1&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5Bsearchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_id&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bdata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B8%5D%5Bdata%5D=code&columns%5B8%5D%5Bname%5D=code.code&columns%5B8%5D%5Bsearchable%5D=true&columns%5B8%5D%5Borderable%5D=true&columns%5B8%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B8%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B9%5D%5Bdata%5D=id&columns%5B9%5D%5Bname%5D=id&columns%5B9%5D%5Bsearchable%5D=false&columns%5B9%5D%5Borderable%5D=true&columns%5B9%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B9%5D%5Bsearch%5D%5Bregex%5D=false&order%5B0%5D%5Bcolumn%5D=9&order%5B0%5D%5Bdir%5D=desc&start=0&length=15&search%5Bvalue%5D=&search%5Bregex%5D=false&author=&port=&type={TypeOptions}&tag=&platform=&_=1642320031024")
        MainData = api.json()['data']
        if len(MainData) == 0:
            print(f"{BLU}[{RED}-{BLU}] {RED}No data found {YLW}:(")
            time.sleep(1)
            exit()
        else:
            for Data in MainData:
                global number
                number += 1
                table.add_row([
                    f'{GRN}{number}{RES}', 
                    f"{GRN}{Data['description'][1]}{RES}", 
                    f"{GRN}{Data['id']}{RES}", 
                    f"{GRN}{Data['type_id']}{RES}",
                    f"{GRN}{Data['platform_id']}{RES}",
                    f"{GRN}{Data['author_id'][1]}{RES}",
                    f"{GRN}{Data['date_published']}{RES}"
                    ])
            print(f'\n{table}\n')
    try:
        input(f"{YLW}[{RED}+{YLW}] {GRN}Use {YLW}ctrl+c{GRN} to {RED}exit ...{RED}")
    except:
        exit()


# Search function with the desired Author on the exploitdb site
def Search_Author():
    session_main()
    clear()
    print(BannerAcsii)
    print(f"{RED}[{GRN}+{RED}] {BLU}Please enter the Author you want to search")
    print(f"{GRN}[{YLW}!{GRN}] {RED}Try to use the correct Authors\n")
    AuthorOptions = input(f"""{RED}┌──{BLU}[{GRN}EXPLOIT FINDER{BLU}]{RED}-{BLU}[{RED}SearchByAuthor{BLU}]
{RED}└─{BLU}>>{RES} """)
    AuthorID = session.get(f"https://www.exploit-db.com/authors-ajax?term={AuthorOptions}")
    id = AuthorID.json()[0]['id']
    api = session.get(f"https://www.exploit-db.com/?author={str(id)}&draw=1&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5Bsearchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_id&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bdata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B8%5D%5Bdata%5D=code&columns%5B8%5D%5Bname%5D=code.code&columns%5B8%5D%5Bsearchable%5D=true&columns%5B8%5D%5Borderable%5D=true&columns%5B8%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B8%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B9%5D%5Bdata%5D=id&columns%5B9%5D%5Bname%5D=id&columns%5B9%5D%5Bsearchable%5D=false&columns%5B9%5D%5Borderable%5D=true&columns%5B9%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B9%5D%5Bsearch%5D%5Bregex%5D=false&order%5B0%5D%5Bcolumn%5D=9&order%5B0%5D%5Bdir%5D=desc&start=0&length=15&search%5Bvalue%5D=&search%5Bregex%5D=false&author={str(id)}&port=&type=&tag=&platform=&_=1642324724585")
    MainData = api.json()['data']
    if len(MainData) == 0:
        print(f"{BLU}[{RED}-{BLU}] {RED}No data found {YLW}:(")
        time.sleep(1)
        exit()
    else:
        for Data in MainData:
            global number
            number += 1
            table.add_row([
                f'{GRN}{number}{RES}', 
                f"{GRN}{Data['description'][1]}{RES}", 
                f"{GRN}{Data['id']}{RES}", 
                f"{GRN}{Data['type_id']}{RES}",
                f"{GRN}{Data['platform_id']}{RES}",
                f"{GRN}{Data['author_id'][1]}{RES}",
                f"{GRN}{Data['date_published']}{RES}"
                ])
        print(f'\n{table}\n')  
    try:
        input(f"{YLW}[{RED}+{YLW}] {GRN}Use {YLW}ctrl+c{GRN} to {RED}exit ...{RED}")
    except:
        exit()


# Search function for free search on exploitdb
def Search():
    session_main()
    clear()
    print(BannerAcsii)
    print(f"{RED}[{GRN}+{RED}] {BLU}Please enter the Author you want to search")
    print(f"{GRN}[{YLW}!{GRN}] {RED}Try to use the correct Authors\n")
    SearchText = input(f"""{RED}┌──{BLU}[{GRN}EXPLOIT FINDER{BLU}]{RED}-{BLU}[{RED}FreeSearch{BLU}]
{RED}└─{BLU}>>{RES} """)
    api = session.get(f"https://www.exploit-db.com/?draw=1&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5Bsearchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_id&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bdata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B8%5D%5Bdata%5D=code&columns%5B8%5D%5Bname%5D=code.code&columns%5B8%5D%5Bsearchable%5D=true&columns%5B8%5D%5Borderable%5D=true&columns%5B8%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B8%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B9%5D%5Bdata%5D=id&columns%5B9%5D%5Bname%5D=id&columns%5B9%5D%5Bsearchable%5D=false&columns%5B9%5D%5Borderable%5D=true&columns%5B9%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B9%5D%5Bsearch%5D%5Bregex%5D=false&order%5B0%5D%5Bcolumn%5D=9&order%5B0%5D%5Bdir%5D=desc&start=0&length=15&search%5Bvalue%5D={SearchText}&search%5Bregex%5D=false&author=&port=&type=&tag=&platform=&_=1642325127390")
    MainData = api.json()['data']
    if len(MainData) == 0:
        print(f"{BLU}[{RED}-{BLU}] {RED}No data found {YLW}:(")
        time.sleep(1)
        exit()
    else:
        for Data in MainData:
            global number
            number += 1
            table.add_row([
                f'{GRN}{number}{RES}', 
                f"{GRN}{Data['description'][1]}{RES}", 
                f"{GRN}{Data['id']}{RES}", 
                f"{GRN}{Data['type_id']}{RES}",
                f"{GRN}{Data['platform_id']}{RES}",
                f"{GRN}{Data['author_id'][1]}{RES}",
                f"{GRN}{Data['date_published']}{RES}"
                ])
        print(f'\n{table}\n') 
    try:
        input(f"{YLW}[{RED}+{YLW}] {GRN}Use {YLW}ctrl+c{GRN} to {RED}exit ...{RED}")
    except:
        exit()



# Function to download exploit
def Download():
    session_main()
    clear()
    print(BannerAcsii)
    print(f"{RED}[{GRN}+{RED}] {BLU}Please enter an exploit id\n")
    ExploitId = input(f"""{RED}┌──{BLU}[{GRN}EXPLOIT FINDER{BLU}]{RED}-{BLU}[{RED}Download{BLU}]
{RED}└─{BLU}>>{RES} """)      
    data = session.get(f"https://www.exploit-db.com/raw/{ExploitId}").text
    with open(f"{ExploitId}.txt" , "w+") as file:
        file.write(data)
    print(f"\n {GRN}[ {YLW}Exploit was downloaded with ID {RED}{ExploitId} {GRN}]{RES} \n")
    print(f"\n  {YLW}With this {RED}{ExploitId}.txt {YLW}the name was saved {RES}\n")
    try:
        input(f"{YLW}[{RED}+{YLW}] {GRN}Use {YLW}ctrl+c{GRN} to {RED}exit ...{RED}")
    except:
        exit()


# ======================================= #
if __name__ == "__main__":
    while True:
        MainBanner()
        try:
            SearchOptions = int(input(f"""{RED}┌──{BLU}[{GRN}EXPLOIT FINDER{BLU}]{RED}-{BLU}[{RED}root{BLU}]
{RED}└─{BLU}>>{RES} """))
        except:
            Error()       
            
        if SearchOptions == 1:
            Search_Tag()
        elif SearchOptions == 2:
            Search_Type()
        elif SearchOptions == 3:
            Search_Platform()
        elif SearchOptions == 4:
            Search_Port()
        elif SearchOptions == 5:
            Search()
        elif SearchOptions == 6:
            New_Exploit()
        elif SearchOptions == 7:
            Search_Author()
        elif SearchOptions == 8:
            Download()
        elif SearchOptions == 9:
            time.sleep(0.5)
            exit()
        else:
            Error()
            time.sleep(0.5)
            exit()
